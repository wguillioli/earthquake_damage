"has_secondary_use_other")
# iterate over all discrete variables and identify which have power of prediction
# and perform data prep as needed (binning)
df_discrete <- d %>%
select(damage_grade, all_of(vars_discrete))
for (i in 2:ncol(df_discrete)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_discrete[i])))
t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
print(t)
print(round(prop.table(t, 2),2))
}
mv %>% arrange(desc(mv)) #good, only damage_grade for test group has
mv %>% arrange(desc(mv)) #good, only damage_grade for test group has
d %>%
group_by(dataset) %>%
count(damage_grade) # as expected, test buildings have NA
View(test)
test$damage_grade <- 999 # to avoid NAs and will ignore later
View(test)
d <- bind_rows(train, test)
d %>%
group_by(dataset) %>%
count(damage_grade) # as expected, test buildings have NA
# missing values?
sum(is.na(d))
mv <- sapply(d, function(df){sum(is.na(df)==TRUE);})
mv <- data.frame(mv, variable = names(mv))
mv %>% arrange(desc(mv)) #good, only damage_grade for test group has
vars_binary <- c("has_superstructure_adobe_mud",
"has_superstructure_mud_mortar_stone",
"has_superstructure_stone_flag",
"has_superstructure_cement_mortar_stone",
"has_superstructure_mud_mortar_brick",
"has_superstructure_cement_mortar_brick",
"has_superstructure_timber",
"has_superstructure_bamboo",
"has_superstructure_rc_non_engineered",
"has_superstructure_rc_engineered",
"has_superstructure_other",
"has_secondary_use",
"has_secondary_use_agriculture",
"has_secondary_use_hotel",
"has_secondary_use_rental",
"has_secondary_use_institution",
"has_secondary_use_school",
"has_secondary_use_industry",
"has_secondary_use_health_post",
"has_secondary_use_gov_office",
"has_secondary_use_use_police",
"has_secondary_use_other")
vars_numeric <- c("geo_level_1_id",
"geo_level_2_id",
"geo_level_3_id",
"age",
"area_percentage",
"height_percentage")
vars_discrete <- c("land_surface_condition",
"foundation_type",
"roof_type",
"ground_floor_type",
"other_floor_type",
"position",
"plan_configuration",
"legal_ownership_status",
"count_floors_pre_eq",
"count_families")
df_binary <- d %>%
select(damage_grade, starts_with("has"))
for (i in 2:ncol(df_binary)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_binary[i])))
t <- table(df_binary[, i], df_binary[, 1]) #[, 1] == damage_grade
print(t)
print(round(prop.table(t, 2),2))
}
# remove from df the noise variables with no power
binary_vars_to_remove <- c("has_secondary_use_institution",
"has_secondary_use_school",
"has_secondary_use_industry",
"has_secondary_use_health_post",
"has_secondary_use_gov_office",
"has_secondary_use_use_police",
"has_secondary_use_other")
df_discrete <- d %>%
select(damage_grade, all_of(vars_discrete))
for (i in 2:ncol(df_discrete)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_discrete[i])))
t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
print(t)
print(round(prop.table(t, 2),2))
}
# r
cor(d)
str(d)
# r
d %>%
select(all_of(vars_discrete)))
# r
d %>%
select(all_of(vars_discrete))
# r
d %>%
select(all_of(-vars_discrete))
# r
d %>%
select(-all_of(vars_discrete))
# r
d %>%
select(-all_of(vars_discrete),-building_id, -dataset)
# r
d %>%
select(-all_of(vars_discrete),-building_id, -dataset, count_floors_pre_eq,
count_families)
# r
d %>%
select(-all_of(vars_discrete),-building_id, -dataset, count_floors_pre_eq,
count_families) %>%
cor()
# r
d %>%
select(-all_of(vars_discrete),-building_id, -dataset, count_floors_pre_eq,
count_families) %>%
round(cor(),2)
# r
d %>%
select(-all_of(vars_discrete),-building_id, -dataset, count_floors_pre_eq,
count_families) %>%
cor()
# r
d %>%
select(-all_of(vars_discrete),-building_id, -dataset, count_floors_pre_eq,
count_families) %>%
cor() %>%
round(,2)
# r
r <- d %>%
select(-all_of(vars_discrete),-building_id, -dataset, count_floors_pre_eq,
count_families) %>%
cor()
View(r)
round(r,2)
require(corrplot)
round(r,2)
corrplot(r)
r_df <- data.frame(r)
round(r,2)
#df to see in xls
r_df <- data.frame(r)
View(r_df)
write.csv(r_df)
write_csv(r_df)
?write_csv
write_csv(r_df,
file = "r_df.csv")
write_csv(r_df,
file = "./temp/r_df.csv")
r_df$x <- row.names(r_df)
View(r_df)
write_csv(r_df,
file = "./temp/r_df.csv")
write_csv(r_df,
file = "./temp/r_df.csv")
?cor
df_discrete <- d %>%
select(damage_grade, all_of(vars_discrete))
for (i in 2:ncol(df_discrete)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_discrete[i])))
t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
print(t)
print(round(prop.table(t, 2),2))
}
d %>%
case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
)
View(d)
d %>%
case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
)
d %>%
case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
)
d %>%
mutate = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
)
d %>%
mutate = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
)
d %>%
mutate = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = "foundation_type"
)
# `case_match()` isn't limited to character input:
y <- c(1, 2, 1, 3, 1, NA, 2, 4)
case_match(
y,
c(1, 3) ~ "odd",
c(2, 4) ~ "even",
.default = "missing"
)
d %>%
mutate(foundation_type = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = "foundation_type"
)
)
d %>%
mutate(foundation_type = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
)
)
df_discrete <- d %>%
select(damage_grade, all_of(vars_discrete))
for (i in 2:ncol(df_discrete)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_discrete[i])))
t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
print(t)
print(round(prop.table(t, 2),2))
}
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type)
)
View(t)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type)
)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s" ~ "a_c_f_m_n_o_s"),
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status)
)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s") ~ "a_c_f_m_n_o_s",
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status)
)
View(t)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s") ~ "a_c_f_m_n_o_s",
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status),
count_floors_pre_eq_imp = case_when(count_floors_pre_eq >= 4 ~ 4,
.default = count_floors_pre_eq)
)
View(t)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s") ~ "a_c_f_m_n_o_s",
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status),
count_floors_pre_eq_imp = as.factor(case_when(count_floors_pre_eq >= 4 ~ "4+",
.default = count_floors_pre_eq))
)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s") ~ "a_c_f_m_n_o_s",
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status),
count_floors_pre_eq_imp = factor(case_when(count_floors_pre_eq >= 4 ~ "4+",
.default = count_floors_pre_eq))
)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s") ~ "a_c_f_m_n_o_s",
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status),
count_floors_pre_eq_imp = factor(case_when(count_floors_pre_eq >= 4 ~ "4+",
.default = count_floors_pre_eq))
)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s") ~ "a_c_f_m_n_o_s",
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status),
count_floors_pre_eq_imp = case_when(count_floors_pre_eq >= 4 ~ 4,
.default = count_floors_pre_eq),
count_floors_pre_eq_imp = case_match(count_floors_pre_eq_imp,
4 ~ "4+",
.default = count_floors_pre_eq_imp)
)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s") ~ "a_c_f_m_n_o_s",
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status),
count_floors_pre_eq_imp = case_when(count_floors_pre_eq >= 4 ~ 4,
.default = count_floors_pre_eq), #convert to factor later
count_families = case_when(count_families >= 3 ~ 3,
.default = count_families) #convert to factor later
)
View(t)
t <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s") ~ "a_c_f_m_n_o_s",
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status),
count_floors_pre_eq_imp = case_when(count_floors_pre_eq >= 4 ~ 4,
.default = count_floors_pre_eq), #convert to factor later
count_families_imp = case_when(count_families >= 3 ~ 3,
.default = count_families) #convert to factor later
)
d <- d %>%
mutate(foundation_type_imp = case_match(foundation_type,
c("u", "w") ~ "u_w",
.default = foundation_type
),
ground_floor_type_imp = case_match(ground_floor_type,
c("m", "z") ~ "m_z",
.default = ground_floor_type
),
plan_configuration_imp = case_match(plan_configuration,
c("a", "c", "f", "m", "n", "o", "s") ~ "a_c_f_m_n_o_s",
.default = plan_configuration
),
legal_ownership_status_imp = case_match(legal_ownership_status,
c("r", "w") ~ "r_w",
.default = legal_ownership_status),
count_floors_pre_eq_imp = case_when(count_floors_pre_eq >= 4 ~ 4,
.default = count_floors_pre_eq), #convert to factor later
count_families_imp = case_when(count_families >= 3 ~ 3,
.default = count_families) #convert to factor later
)
df_numeric <- d %>%
select(damage_grade, all_of(vars_numeric))
View(df_numeric)
?boxplot
for (i in 2:ncol(df_numeric)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_discrete[i])))
boxplot(df_discrete[i] ~ dr_discrete[1])
#t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
#print(t)
#print(round(prop.table(t, 2),2))
}
for (i in 2:ncol(df_numeric)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_numeric[i])))
boxplot(df_numeric[i] ~ df_numeric[1])
#t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
#print(t)
#print(round(prop.table(t, 2),2))
}
for (i in 2:ncol(df_numeric)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_numeric[i])))
boxplot(df_numeric[i] ~ df_numeric$damage_grade)
#t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
#print(t)
#print(round(prop.table(t, 2),2))
}
for (i in 2:ncol(df_numeric)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_numeric[i])))
boxplot(df_numeric[, i] ~ df_numeric$damage_grade)
#t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
#print(t)
#print(round(prop.table(t, 2),2))
}
for (i in 2:ncol(df_numeric)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_numeric[i])))
print(boxplot(df_numeric[, i] ~ df_numeric$damage_grade))
#t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
#print(t)
#print(round(prop.table(t, 2),2))
}
for (i in 2:ncol(df_numeric)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_numeric[i])))
print(boxplot(df_numeric[, i] ~ df_numeric$damage_grade,
xlab=names(df_numeric[i]), horizontal = TRUE)))
for (i in 2:ncol(df_numeric)){
print("--------------------------------------------------")
cat(paste0(i, ": ",colnames(df_numeric[i])))
print(boxplot(df_numeric[, i] ~ df_numeric$damage_grade,
xlab=names(df_numeric[i]), horizontal = TRUE))
#t <- table(df_discrete[, i], df_discrete[, 1]) #[, 1] == damage_grade
#print(t)
#print(round(prop.table(t, 2),2))
}
?median
aggregate(df_numeric[, 3:4], list(df_numeric$damage_grade), quantile)
aggregate(df_numeric[, 3:4], list(df_numeric$damage_grade), median)
